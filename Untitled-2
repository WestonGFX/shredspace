import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import squarify
import plotly.express as px
import json
import webbrowser
import shutil

# Define theme colors globally
theme_colors = {
    "Rainbow": ['#FFB554', '#FFA054', '#FF8054', '#FF5454', '#E64C8D', '#D145C1', '#8C3FC0', '#5240C3', '#4262C7', '#438CCB', '#46ACD3', '#45D2B0', '#4DC742', '#8CD466', '#C8E64C', '#FFFF54'],
    "Green Eggs": ['#58A866', '#AAE009', '#9EFC7D', '#FFF07A', '#FBBF51', '#FFFF00', '#009ACD', '#FF2626', '#E85AAA', '#D1C57E', '#CE95C8', '#5ABFC6'],
    "Olive Sunset": ['#990033', '#CC0033', '#FF9966', '#FFFFCC', '#CCCC99', '#CCCC33', '#999900', '#666600', '#003366', '#006699', '#3399CC', '#99CCCC'],
    "Lagoon Nebula": ['#325086', '#9ED5AE', '#D86562', '#845D4E', '#F4AD6F', '#98C8D6', '#5A272C', '#CFAD4B'],
    "Monaco": ['#EC8921', '#DB4621', '#D92130', '#38B236', '#3DBFCC', '#2A91D2', '#7378D4']
}

class ShredSpaceApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title('ShredSpace - Advanced File Visualizer')
        self.geometry("1200x800")  # Set start size to a reasonable default
        self.configure_ui()

    def configure_ui(self):
        # Progress bar
        self.progress = ttk.Progressbar(self, orient='horizontal', mode='determinate')
        self.progress.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        # Load data button
        load_button = ttk.Button(self, text='Load Data', command=self.load_data)
        load_button.pack(side=tk.TOP, pady=10)

        # Search box for file names
        self.search_var = tk.StringVar()
        search_box = ttk.Entry(self, textvariable=self.search_var)
        search_box.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)
        search_button = ttk.Button(self, text='Search', command=self.search_files)
        search_button.pack(side=tk.TOP, pady=5)

        # Set up the canvas for Matplotlib
        self.canvas = FigureCanvasTkAgg(plt.figure(figsize=(10, 8)), master=self)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        # File operations
        delete_button = ttk.Button(self, text='Delete', command=self.delete_file)
        delete_button.pack(side=tk.LEFT, padx=5, pady=5)
        secure_delete_button = ttk.Button(self, text='Secure Delete', command=self.secure_delete_file)
        secure_delete_button.pack(side=tk.LEFT, padx=5, pady=5)

    def load_data(self):
        directory = filedialog.askdirectory()
        if directory:
            self.progress['value'] = 0
            self.update_idletasks()

            file_sizes = []
            file_names = []
            total_files = len(os.listdir(directory))
            increment = 100 / total_files

            for index, filename in enumerate(os.listdir(directory)):
                path = os.path.join(directory, filename)
                if os.path.isfile(path):
                    file_sizes.append(os.stat(path).st_size)
                    file_names.append(filename)
                self.progress['value'] += increment
                self.update_idletasks()

            data = {'name': file_names, 'size': file_sizes}
            self.data = pd.DataFrame(data)
            self.create_interactive_treemap(self.data, 'Rainbow')

    def search_files(self):
        search_term = self.search_var.get()
        filtered_data = self.data[self.data['name'].str.contains(search_term, case=False, na=False)]
        self.create_interactive_treemap(filtered_data, 'Rainbow')

    def create_interactive_treemap(self, data, color_scheme):
        plt.clf()
        labels = [f"{name}\n{size} bytes" for name, size in zip(data['name'], data['size'])]
        sizes = data['size']
        colors = [theme_colors[color_scheme][int(i % len(theme_colors[color_scheme]))] for i in range(len(data))]

        fig, ax = plt.subplots()
        squarify.plot(sizes=sizes, label=labels, color=colors, alpha=0.6, ax=ax, pad=True)
        plt.axis('off')

        self.canvas.figure = fig
        self.canvas.draw()

    def delete_file(self):
        selected_file = self.get_selected_file()
        if selected_file:
            os.remove(selected_file)
            messagebox.showinfo("Success", f"Deleted {selected_file}")

    def secure_delete_file(self):
        selected_file = self.get_selected_file()
        if selected_file:
            self.perform_secure_delete(selected_file)
            messagebox.showinfo("Success", f"Securely deleted {selected_file}")

    def get_selected_file(self):
        # Implement logic to get the selected file from the treemap
        # This is a placeholder function
        return "path/to/selected/file"

    def perform_secure_delete(self, file_path):
        # Implement secure deletion algorithms
        # Example: Overwrite file with random data before deleting
        with open(file_path, "ba+", buffering=0) as f:
            length = f.tell()
            for _ in range(3):  # Simple 3-pass overwrite
                f.seek(0)
                f.write(os.urandom(length))
        os.remove(file_path)

if __name__ == '__main__':
    app = ShredSpaceApp()
    app.mainloop()



